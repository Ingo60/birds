--- The interpreter for *birds*, a small language on top of the SKI calculus
module birds.Main where

import Java.Net(URL, URLArray, URLClassLoader)
import Data.List hiding(insert, lookup, delete, union)
import Data.TreeMap
import birds.Ski
import birds.Def
import birds.LogicalLine

data ParensCompletor = mutable native birds.ParensCompletor where
    native new :: () -> IO  ParensCompletor

data Global = St {
        console  :: ConsoleReader,
        birds, last :: DefTree,
        dbpath :: String        -- where to save stuff
    }
            
main xs = do
        console <- ConsoleReader.new ()
        complet <- ParensCompletor.new ()
        console.addCompletor complet
        -- console.setPrompt "ski> "
        ref     <- IORef.new St{console,  
                                birds = Tree.empty,
                                last  = Tree.empty,
                                dbpath = if null xs then "birds.ski" else head xs}
        
        
        loadResource ref "birds/standard.ski"
        unless (null xs) do
            loadResource ref (head xs)
        
        mapM_ println [
            "",
            "Enter expressions or bird definitions or help for a command list.",
            "Type CTRL-D to end this session.",
            "",
            ] 
        forever (interaction ref) 
                `catch` eof
                `catch` ioex
                `finally` println "See you again."
    where
        eof :: EOFException -> IO ()
        eof _ = print "Good bye. "
        ioex :: IOException -> IO ()
        ioex _ = print "Sorry, we had an IO exception. "


oneLine :: IORef Global -> String -> IO ()
oneLine ref s = do
    let (command, expr) = parseCommand s
    command ref expr 

loadFile :: IORef Global -> String -> IO ()
loadFile ref "" = ref.get >>= loadFile ref . Global.dbpath
loadFile ref fn = do
            rdr <- openReader fn
            IORef.modify Global.{dbpath = fn} ref
            workBR ref rdr `finally` do 
                rdr.close
                stderr.println ("Loaded file " ++ fn)
        `catch` notfound fn

workBR ref rdr = do
    logical <- getNext rdr
    case logical of
        Nothing -> return ()
        Just s  | null s    = workBR ref rdr
                | otherwise = oneLine ref s >> workBR ref rdr

loadResource ref name = do
        thiscl <- ClassLoader.current
        urls   <- URLArray.fromListST []
        loader <- URLClassLoader.new urls thiscl
        mbUrl  <- loader.getResource name
        case mbUrl of
            Nothing -> loadFile ref name
            Just url -> do
                stream <- url.openStream
                isr <- InputStreamReader.new stream "UTF-8"
                rdr <- BufferedReader.new isr
                workBR ref rdr `finally` do
                    rdr.close
                    stderr.println ("Loaded resource " ++ name)


        
    
notfound :: String -> FileNotFoundException -> IO ()
notfound fn _ = stderr.println ("Could not find " ++ fn)

saveFile :: IORef Global -> String -> IO ()
saveFile ref "" = ref.get >>= saveFile ref . Global.dbpath
saveFile ref fn = do
            pr <- openWriter fn
            state <- ref.get
            mapM_ (pr.println . show) ((map undef . deporder) state.birds)
            pr.close
            stderr.println ("Saved to " ++ fn)
            IORef.modify Global.{dbpath = fn} ref
        `catch` notfound fn
    where
        undef D{left,right} = C "let " <> left <> right

interaction :: IORef Global -> IO ()
interaction ref = ref.get 
    >>= getNext . Global.console
    >>= maybe (throwIO (EOFException.new "EOF")) (oneLine ref)


getLast :: IORef Global -> IO SKI
getLast ref =  ref.get 
    >>= return . maybe identity Def.bird . flip Tree.lookupS "_" . Global.last

setLast :: IORef Global -> SKI -> IO ()
setLast ref bird = do
    state <- ref.get
    let d = D{left=C "_", right=identity, bird}
    IORef.modify Global.{last <- insertkv "_" d} ref    
            
cmdEval  ref   = cmdEvalWith ref eval
cmdStep  ref s = cmdEvalWith ref step s 
cmdParse ref   = cmdEvalWith ref id

cmdEvalWith :: IORef Global -> (SKI -> SKI) -> String -> IO ()
cmdEvalWith ref what "" = getLast ref >>= cmdEvalWith ref what . show
    
cmdEvalWith ref what reply = do
    t0 <- System.currentTimeMillis ()
    state <- ref.get  
    case parse reply of
            Left msg  -> stderr.println msg
            Right parsed -> do 
                let expr = subst state.last parsed
                case expr of
                    x   -> do
                        let result = unE (what (subst state.birds x))
                        println (maybe (show result) show (numeric result))
                        setLast ref result
                        t1 <- System.currentTimeMillis ()
                        let dur = (t1-t0).double / 1000
                        when (dur > 1) do
                             stderr.println("Duration: " ++ show dur)
                -- return ()

newdef :: IORef Global -> Def -> IO ()
newdef ref d = do
    state <- ref.get
    let s = name d
        newbirds = case state.birds.lookupS s of
            Nothing -> state.birds.insert s d
            Just _  -> (fold remake Tree.empty  . replace d . deporder) state.birds
        remake :: DefTree -> Def -> DefTree
        remake tree d  = case def tree d.left d.right of
            Right d -> tree.insert (name d) d 
            Left  e -> tree
        replace d []  = []
        replace d (o:os)  
            | name o == name d = d : os
            | otherwise = o : replace d os 
    IORef.modify Global.{birds=newbirds} ref
    setLast ref d.bird
    

cmdList :: IORef Global -> String -> IO ()
cmdList ref s = do
    state <- ref.get
    case parse s of
        Right (C s) -> case state.birds.lookupS s of
            Just def -> println (show def) >> println (name def ++ " = " ++ show def.bird)
            Nothing  -> stderr.println("Bird " ++ s ++ " is unknown.")
        _ -> do
            mapM_ (println . show) (deporder state.birds) 

--- prints the last expression in raw form
cmdRaw :: IORef Global -> String -> IO ()
cmdRaw ref "" = getLast ref >>= println
cmdRaw ref s  = cmdParse ref s >> getLast ref >>= println
 
--- prints the expression as number
numericPrint ref "" = getLast ref >>= println . numeric
numericPrint ref s  = cmdEval ref s >> getLast ref >>= println . numeric

numeric :: SKI -> Maybe Integer
numeric x = num' x 0 where
    num' :: SKI -> Integer -> Maybe Integer
    num' (App (App (P 'V' _) (App (P 'K' _) (P 'I' _))) pred) !n = num' pred (n+1)
    num' (App (App (P 'V' _) (P 'K' _)) (P 'K' _)) !n = Just n
    num' x n = Nothing    
 
cmdLet :: IORef Global -> String -> IO ()
cmdLet ref s  = do
    state <- ref.get
    case parse (".let " ++ s) of
        Left msg  -> stderr.println ("SYNTAX: " ++ msg)
        Right parsed -> do 
            let expr = subst state.last parsed
            case expr of
                -- new definition
                (App (App (C ".let") left) right) -> do
                    case def state.birds left right of
                        Left s -> stderr.println ("ERROR in definition of " 
                                    ++ show left 
                                    ++ ": " ++ s)
                        Right d -> newdef ref d
                sonst -> do
                    stderr.println ("Not well formed, need 'let (Xabc)(expr)'") 

cmdElim :: IORef Global -> String -> IO ()
cmdElim ref s  = do
    state <- ref.get
    case parse (".elim " ++ s) of
        Left msg  -> stderr.println ("SYNTAX: " ++ msg)
        Right parsed -> do 
            let expr = subst state.last parsed
            case expr of
                -- new definition
                (App (App (C ".elim") left) right) -> do
                    case left of
                        V c -> do 
                            let result = c `elimination` right
                            println result
                            setLast ref result
                            return ()
                        _ -> stderr.println ("expected variable, found " ++ show left)
                _ -> stderr.println ("Not well form, need 'eliminate v (expr)'") 

cmdComment ref _ = return ()
cmdEcho    ref s = println s

cmdHelp _ _ = mapM_ println [
        "Commands: ",
        "    parse expr     Parse expression and show the result.",
        "    step  expr     Perform a single evaluation step, and show the result.",
        "    eval  expr     Evaluate an expression and show the result.",
        "",
        "When the expression is missing, last printed expression is used.",
        "The last printed expression can called explicitly by typing _",
        "An empty line is equivalent to 'step _'",
        "",
        "    list C         List definition of bird C.",
        "    list           List definitions of all birds.",
        "    load filename  Load a file.",
        "    load           Load the last file.",
        "    save filename  Save definitions to file.",
        "    save           Save definitions to last file.",
        "",
        "    let (Pabc) (expr)  define bird.",
        "    elim v (expr)  Eliminate variable v from expression.",
        "",
        "Anything else is taken as an expression, which is evaluated and printed.", 
    ]
 
commands = [
    (´^step\s*´, cmdStep),
    (´^p(arse)\s*´, cmdParse),
    (´^eval\s*´, cmdEval),
    (´^r(aw)?\s*´,  cmdRaw),
    (´^li(st)?\s*´, cmdList),
    (´^lo(ad)?\s*´,  loadResource),
    (´^s(ave)?\s*´,  saveFile),
    (´^n(umber)?\s*´, numericPrint),
    (´^let\s*´, cmdLet),
    (´^elim(inate)?\s*´, cmdElim),
    (´^###\s*´, cmdComment),
    (´^echo\s*´, cmdEcho),
    (´^h(elp)?\s*´, cmdHelp),
    ]

parseCommand "" = (cmdStep, "")
parseCommand s = try commands where
    try ((m,x):ms) 
        | s ~ m =  (x, (m.matcher s).replaceFirst "")
        | otherwise = try ms 
    try [] = (cmdEval, s) 

