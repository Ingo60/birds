--- The central 'SKI' data structure with instance and common operations
module birds.Ski where

import Data.List (sort, uniq)
import Data.TreeMap
import Data.Monoid (Semigroup(mappend))
import frege.lib.ForkJoin (par)

{--
    Representation of SKI expressions with variables and constants.
    
    Primitives are basically functions that operate on a list of arguments.
    The 'P' functions return ('Left' r), where @r@ is the final result
    or ('Right' ys) where @ys@ is the resulting *non-empty* stack.
    -} 
data SKI = P Char ([SKI] -> (SKI|[SKI]))    --- primitive combinator 
        | V Char                            --- variable 
        | C String                          --- combinator 
        | App SKI SKI                       --- call out second bird to first
        | E SKI                             --- shared 

primitives = Tree.fromList [('S', starling), ('K', kestrel), ('I', identity),
                    ('V', vireo),
                    ('Y', fix),
                    ('T', thrush),
                    ('B', bluebird),
                    ('C', cardinal),
                ]
primitive c = c `elem` keys primitives
isPrim s = length s == 1 && primitive (String.charAt s 0)
aristocratic c = c `elem` unpacked "SIVYTBC"

identity = P 'I' i where
    i [] = Left identity
    i xs = Right xs

starling = P 'S' s where
    s (f:g:x:xs) = let !xx = mkE x in Right (f : xx : g<>xx : xs)
    s xs         = (Left . unflat) (starling : xs)

mkE (e@E _)  = e
mkE (e@App (P 'Y' _) _) = e
mkE x        = E (eval x)

unE (E x)     = unE x
unE (App a b) = (unE a) <> (unE b)
unE x         = x

kestrel = P 'K' k where
    k (a:b:xs)  = Right (a:xs)
    k xs        = (Left . unflat) (kestrel : xs)

vireo = P 'V' v where
    v (x:y:z:xs) = Right (z:x:y:xs)
    v xs         = (Left . unflat) (vireo : xs)

fix = P 'Y' y where
    y (f:xs) = Right (f:fix <> f:xs)
    y xs     = (Left . unflat) (fix : xs)

thrush = P 'T' t where
    t (x:y:xs) = Right (y:x:xs)
    t xs       = (Left . unflat) (thrush : xs)

bluebird = P 'B' b where
    b (f:g:h:xs) = Right (f:g<>h:xs)
    b xs         = (Left . unflat) (bluebird : xs)

cardinal = P 'C' c where
    c (f:a:b:xs) = Right (f:b:a:xs)
    c xs         = (Left . unflat) (cardinal : xs)
     
infixl 7 `<>`

{-- 
    Embed the SKI syntax into Frege. The expression
    > SKK(S(KS)K)x
        can be written thus:
    > S <> K <> K <> (S <> (K <> S) <> K) <> V 'x'
    -}     
(<>) = App


{-- 
    Something like
    
    > SKKy
    
    is represented as left leaning 'App' tree, but sometimes we
    want to use the isomorphism with a list:
    
    > flat (App (App (App a b) c) d) = [a, b, c, d]
    > flat p = [p] -- where p is not an App
    
    This only flattens the outermost 'App', of course.
    Note that the result is never the empty list, as atomic SKI expressions
    result in a singleton list.
    -}
flat = flatT []

--- Helper for 'flat', or when part of the list already exists.
flatT acc (App a b) = flatT (b:acc) a
flatT acc x         = x:acc
          
--- The converse of 'flat', the following law holds:
--- > unflat (flat x) == x
--- Can be used like 
--- > unflat (replicate 1000 I)
unflat = foldl1 (<>) 


--- get the set of variables in an SKI expressions
freevars = uniq . sort . vars

--- get an unordered list of variables that occur in a SKI expressions, duplicates possible
vars (V s)     = [s]
vars (App a b) = vars a ++ vars b
vars _ = []

--- get an unordered list of combinator names that occur in a SKI expression
combinators (C s) = [s]
combinators (App a b) = combinators a ++ combinators b
combinators _ = []

--- get an unordered list of primitives that occur in an expression
prims (P c _)   = [c]
prims (App a b) = prims a ++ prims b
prims _         = []


{-- 
    Reduce a SKI expression according to the following rules:
    - A primitive expressions (I,K,S,V,C) reduces to itself
    - @I <> a@ reduces to @a@
    - @K <> x <> y@ reduces to @x@
    - @S <> x <> y <> z@  reduces to   @x <> z <> (y <> z)@
    - @a<>b@ reduces to reduced @c<>b@, where @c@ is the reduced @a@. 

    Note that, if we have a<>b, b is not reduced.

    The definition below is a bit complex, but we must avoid 
    stack overflows on deeply nested expressions like
    
    >   unflat (replicate 5000 I)
    
    The reduction algorithm trades stack space against heap space, by
    going down to the expression nested deepest on the left, while pushing
    the right elements to a list (like 'flat'). Once the innermost expression
    has been reduced, we have either a 'Var', a 'Const' or a basic combinator.
    
    If it is a basic combinator, then its effect on the argument list is 
    computed, and the process continues until we have an atom that connot 
    be applied to the list anymore. 
    
    For example 
    
    > II(KI)I                   
    > (((II)(KI))I)             II(KI)I
    > ((II)(KI))   [I]          II(KI)I
    > (II) [KI,I]               II(KI)I
    
    Only at this point do we see that we can reduce II:
    
    > I [KI, I]                 I(KI)I
    
    The I pops the first argument off the list and lets it operate on the tail.
    Now again, we have an expression of the form @a <> b@ on top:
    
    > (KI) [I]                  KII
    > K [I, I]                  KII
    
    Now K can operate on the list, by throwing the second element away and
    we continue to operate with the first I.
     
    > I []                      I
    -}
eval = evaluate false
evaluate eager = reduce []
    where
        -- reduce acc ex | traceLn ("reduce: " ++ show ex ++ "  " ++ show acc) = undefined
        
        -- Now the critical step to avoid too deeply nested left recursions.
        -- The expression b is saved for later, and we continue with the left hand side
        -- Since this is tail recursion, it will be a loop at runtime.
        reduce !acc (App a b)                    = reduce (b:acc) a
        reduce !acc (E x)                        = reduce acc x
        
        -- At this point, the leftmost expression of the original
        -- expression is not of the form @a<>b@ anymore and the arguments
        -- are in the accumulator.
        -- For example, when we had
        --  (S <> K <> x) <> a <> b
        -- we have now 
        --   reduce [K,x,a,b] S
        
        -- We do now apply the basic reduction rules to the stack. 
        -- a) reduction of a primitive
        reduce !acc (P _ f)                       = case f acc of
            Left result -> result
            Right ys    -> reduce (tail ys) (head ys)
        -- b) reduction of a constructor
        -- It is nether of the form (a <> b), nor is it a I,K or S
        -- that could operate on the list.
        -- We take the opportunity to optimize the arguments a bit, 
        -- without reducing them fully. For, if we did reduce them
        -- now, then evaluation of
        --  Yf,  where Y is the fixpoint operator Yf = f(Yf)
        -- would cause us to evaluate Yf again, which would result in
        -- f(Yf) and we had to reduce that Yf again and so on ad infinitum.
        reduce !acc x                            = unflat (x:map f acc)
            where f = if eager then evaluate true else id


--- evaluate the innermost expression until it is not reducible anymore
step = reduce [] where
    reduce acc (App a b)                    = reduce (b:acc) a
    reduce acc (E x)                        = reduce acc x
    reduce xs (P _ f)                       = case f xs of
        Left result -> result
        Right ys    -> unflat ys
    reduce acc x                            = unflat (x:acc)
            


--- literal equality, does not take substitutions in account
instance Eq SKI where
    P a _   == P b _    = a == b
    V a     == V b      = a == b
    C a     == C b      = a == b
    App a b == App c d  = a == c && b == d
    E a     == E b      = a == b
    _       == _        = false
    hashCode x = hashCode (show x)

instance Semigroup SKI where
    mappend = (<>)

--- raw show
instance Show SKI where
    show (P c _) = display c
    show (V  c) = display c
    show (C  s) = s
    show (E  x) = show (App (P 'E' (Right . id)) x)
    show app = showList ( flat app ) "" 
    showList [] _ = ""
    showList (x:xs) _ = showsub x ++ space ++ showList xs ""
        where 
            dotted (C s) = (s.charAt 0) == '.'
            dotted _     = false
            cvp P{}      = true
            cvp V{}      = true
            cvp (C s)    = (s.charAt 0) != '.'
            cvp _        = false
            space        = if dotted x && !(null xs) && cvp (head xs) then " " else ""
    
    showsub (app@App{}) = "(" ++ show app ++ ")"
    showsub (e@E{})     = "(" ++ show e   ++ ")"
    showsub ski = show ski 
    
instance Semigroup (Semigroup b) => (a|b) where
    mappend (left@Left l) _          = left
    mappend (Right _) (left@Left  b) = left
    mappend (Right a) (Right b)      = Right (a `mappend` b) 

data Token = Atom SKI | LPAR | RPAR
instance Show Token
    where
        show LPAR = "("
        show RPAR = ")"
        show (Atom x) = show x
        showList ts ss = concatMap show ts ++ ss

--- tell if character is allowed as suffix?
noDelimitter c = c != ' ' && c != '.' && c != '(' && c != ')' 
                

parse  = parse' . lex . unpacked  where
    lex [] = []
    lex (s:xs)
        | s.isWhitespace = lex xs
        | Just p <- primitives.lookup s = Atom p : lex xs
        | s >= 'a' && s <= 'z' = Atom (V s) : lex xs
        | s == '(' = LPAR : lex xs
        | s == ')' = RPAR : lex xs
        | s == '.',                             -- allow .whatever
            name  <- takeWhile noDelimitter xs,        
            rest  <- dropWhile noDelimitter xs 
             = Atom (C (packed (s:name))) : lex rest
        | otherwise = Atom (C s.display) : lex xs
    
       
    parse' = state0 []
    
    state0 acc (Atom x:rest) = state0 (x:acc) rest
    state0 acc (LPAR:rest) = case state1 [] rest of
        Right (x, ts) = state0 (x:acc) ts
        Left err      = Left err
    state0 acc (RPAR:rest) = Left "unexpected ')'"
    state0 [] [] = Left "unexpected end of input" 
    state0 acc [] = Right (unflat (reverse acc))
        
    state1 acc [] = Left "missing ')'"
    state1 [] (RPAR:xs) = Left "unexpected ')' right after '('"
    state1 acc (RPAR:xs) = Right (unflat (reverse acc), xs)
    state1 acc (Atom x:rest) = state1 (x:acc) rest
    state1 acc (LPAR:rest) = case state1 [] rest of
        Right (x, ts) = state1 (x:acc) ts
        left          = left
 